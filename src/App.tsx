import { useEffect, useState} from 'react'
import style from './App.module.css'
import {useForm} from "react-hook-form";
import useSound from "use-sound";

interface FormData {
    name: string,
    timer: number
}

function App() {
    const {handleSubmit, reset, register} = useForm<FormData>()
    const [name, setName] = useState<string>('')
    const [seconds, setSeconds] = useState<number>(0)
    const [isActive, setIsActive] = useState<boolean>(false);
    const [isDisabled, setIsDisabled] = useState<boolean>(false);
    const [addButtonClicked, setAddButtonClicked] = useState<string>("–°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞");
    const [timerHistory, setTimerHistory] = useState<number>(0)
    const [isVisible, setIsVisible] = useState<boolean>(false);

    const [play] = useSound('/cygan.mp3', {
        volume: 0.4,
    })



    const motivationalPhrases = [
        "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å.",
        "–ù–µ –±–æ–π—Å—è –¥–µ–ª–∞—Ç—å –æ—à–∏–±–∫–∏ ‚Äî –±–æ–π—Å—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å.",
        "–°–µ–≥–æ–¥–Ω—è —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞.",
        "–ë–æ–ª—å—à–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –º–∞–ª–µ–Ω—å–∫–∏—Ö —à–∞–≥–æ–≤.",
        "–°–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑.",
        "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å.",
        "–ù–∞—á–Ω–∏ —Å–µ–π—á–∞—Å ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—Ç –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –Ω–∞—Å—Ç—É–ø–∏—Ç—å.",
        "–î–µ–ª–∞–π —Å–µ–≥–æ–¥–Ω—è —Ç–æ, –∑–∞ —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ —Å–∫–∞–∂–µ—à—å —Å–µ–±–µ —Å–ø–∞—Å–∏–±–æ.",
        "–ú–µ—á—Ç–∞–π, –≤–µ—Ä—å, –¥–µ–π—Å—Ç–≤—É–π!",
        "–°–∞–º–æ–µ —Ç—Ä—É–¥–Ω–æ–µ ‚Äî –Ω–∞—á–∞—Ç—å. –ü–æ—Ç–æ–º –±—É–¥–µ—Ç –ª–µ–≥—á–µ.",
        "–¢—ã —É–∂–µ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–∏, —á–µ–º –±—ã–ª –≤—á–µ—Ä–∞.",
        "–ö–∞–∂–¥—ã–π —à–∞–≥ –≤–ø–µ—Ä—ë–¥ ‚Äî —ç—Ç–æ –ø–æ–±–µ–¥–∞.",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è. –í–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ —Ç—Ä–µ–±—É—é—Ç –≤—Ä–µ–º–µ–Ω–∏.",
        "–ë—É–¥—å –Ω–∞—Å—Ç–æ–π—á–∏–≤ ‚Äî –¥–∞–∂–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ª—É—á—à–µ, —á–µ–º –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ.",
        "–ù–∏–∫—Ç–æ –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–≥–æ, –∫—Ç–æ –Ω–µ —Å–¥–∞—ë—Ç—Å—è."
    ];

        const inputTimerList: number[] = [
            10,
            20,
            30
        ]


    const randomPhrase = motivationalPhrases.sort(() => Math.random() - Math.random()).find(() => true);


    const addTimer = (value: any) => {
        if(!isActive && value.name.trim()) {
            setIsActive(true)
            setName(value.name.trim())
            setSeconds(value.timer.trim())
            setTimerHistory((prevState) => prevState + 1)
        }
    }

    const deleteTimer = (value: any) => {
        setName('')
        reset()
        setSeconds(value.timer.trim())
        setAddButtonClicked('–°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞')
    }

    useEffect(() => {
        let interval : number = 0;
        if (isActive && seconds > 0) {
            interval  = setInterval(() => {
                setSeconds((prevState) => prevState - 1)
            }, 1000)
            setIsDisabled(true)
        }
        else if(seconds === 0){
            setIsActive(false)
            setIsDisabled(false)
            setAddButtonClicked('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑')
            play()
            setIsVisible(true)
        }
        return () => clearInterval(interval)
    }, [isActive,seconds]);


    const handleClose = () => {
        setIsVisible(false)
    }

    useEffect(() => {
        let intervalId: ReturnType<typeof setInterval> | null = null;

        if (isVisible) {
            intervalId = setInterval(() => {
                handleClose();
            }, 2000);
        }

        return () => {
            if (intervalId) clearInterval(intervalId);
        };
    }, [isVisible]);


    return (
        <>
            <div className={style.appHolder}>
                <h2>–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –∏ –∂–¥–∏, —Ç—ã —Å–µ–≥–æ–¥–Ω—è {timerHistory} —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª —Ç–∞–π–º–µ—Ä</h2>
                {seconds !== 0 && name && (
                    <h2>–î—Ä—É–∂–æ–∫, {name}, —É —Ç–µ–±—è –µ—Å—Ç—å {seconds} —Å–µ–∫—É–Ω–¥</h2>
                )}

                <p>{randomPhrase}</p>
                <form className={style.formStyle} onSubmit={handleSubmit(addTimer)}>
                    <input
                        className={style.formtype}
                        type="text"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
                        {...register("name", {required: true})}
                    />
                    <div className={style.TimerStyle}>
                        <label> –¢–∞–π–º–µ—Ä –Ω–∞</label>
                        <input list='inputTimerList' {...register('timer', {required: true})}/>
                    </div>

                    <datalist id="inputTimerList">
                        {inputTimerList.map((word, index) => (
                            <option key={index} value={word}/>
                        ))}
                    </datalist>
                    <button disabled={isDisabled}>
                        {addButtonClicked}
                    </button>
                </form>

                {name && seconds === 0 && (
                    <div className={style.formHidden}>
                        <p>–¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è, {name} üí™</p>
                        <button onClick={deleteTimer}>–°–±—Ä–æ—Å</button>
                    </div>
                )}
                {isVisible ? <ModalWin isVisible={isVisible} handleClose={handleClose} /> : null}

            </div>
        </>
    )
}
    debugger
const ModalWin:React.FC<{isVisible : boolean, handleClose : any}> = ({isVisible, handleClose}) => {
    return (
        <>
        <div className={`${style.modalwin} ${isVisible ? style.isVisible : ''}`} onClick={handleClose}>
            <div className={style.modalContent}>
                <img src="/big-fing.webp" alt=""/>
            </div>
        </div>
        </>
    )
}

export default App
